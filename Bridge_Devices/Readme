BRIDGE PATTERN
is a structural design pattern that lets you split a large class or
a set of closely related classes into two separate hierarchies - abstraction
and implementation - which can be developed independently of each other.

It can be used together with Abstract Factory or Builder.

Use the Bridge pattern when you want to divide and organize a monolithic
class that has several variants of some functionality (for example,
if the class can work with various database servers).

Use the pattern when you need to extend a class in several orthogonal (independent) dimensions.

The Bridge suggests that you extract a separate class hierarchy for each of the dimensions.
The original class delegates the related work to the objects belonging to those hierarchies
instead of doing everything on its own.

HOW TO IMPLEMENT

1. Identify the orthogonal dimensions in your classes.
These independentconceptscouldbe:abstraction/platform,domain/
infrastructure, front-end/back-end, or interface/implementation.
2. See what operations the client needs and define them in the base abstraction class.
3. Determine the operations available on all platforms. Declare the ones that the
abstraction needs in the general implementation interface.
4. For all platforms in your domain create concrete implementationclasses,
but make sure they all follow the implementation interface.
5. Inside the abstraction class, add a reference field for the implementation type.
The abstraction delegates most of the work to the implementation object that’s referenced in that field.
6.If you have several variants of high-level logic, create refined abstractions
for each variant by extending the base abstraction class.
7. The client code should pass an implementation object to the abstraction’s constructor
to associate one with the other. After that, the client can forget about the
implementation and work only with the abstraction object.

Bridge, State, Strategy (and to some degree Adapter) have very similar structures.
Indeed, all of these patterns are based on composition, which is delegating work to other objects.
However, they all solve different problems. A pattern isn't just a recipe for structuring your code
in a specific way. It can also communicate to other developers the problem the pattern solves.

