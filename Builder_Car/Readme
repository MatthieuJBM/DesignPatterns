BUILDER
is a creational design pattern that lets you construct complex objects step by step.
The pattern allows you to produce different types and representations of an object using the same construction code.

WHEN TO USE
Say you have a constructor with ten optional parameters. Calling such a beast is very inconvenient; therefore,
you overload the constructor and create several shorter versions with fewer parameters.
These constructors still refer to the main one, passing some default values into any omitted parameters.

class Pizza {
    Pizza(int size) {...}
    Pizza(int size, boolean cheese) {...}
    Pizza(int size, boolean cheese, boolean pepperoni) {...}
    // ...

The Builder pattern lets you build objects step by step, using only those steps that you really need.

Use the Builder pattern when you want your code to be able to create different representations of some product (for example, stone and wooden houses).

Use the Builder to construct Composite trees or other complex objects.

HOW TO IMPLEMENT
1. Make sure that you can clearly define the common construction steps for building all available product representations.
   Otherwise, you won’t be able to proceed with implementing the pattern.
2. Declare these steps in the base builder interface.
3. Create a concrete builder class for each of the product representations and implement their construction steps.
   Don’t forget about implementing a method for fetching the result of the construction.
   The reason why this method can’t
   bedeclaredinsidethebuilderinterfaceisthatvariousbuilders
   may construct products that don’t have a common interface.
   Therefore, you don’t know what would be the return type for
   such a method. However, if you’re dealing with products from
   a single hierarchy, the fetching method can be safely added to
   the base interface.

Builder can be combined with Bridge: the director class plays the role of the abstraction,
while different builders act as implementations.